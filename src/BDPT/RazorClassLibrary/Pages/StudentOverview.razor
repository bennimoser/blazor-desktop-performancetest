@page "/studentoverview/{Remaining:int}"
@using ClassLibrary
@using System.Diagnostics

<table class="table table-striped table-hover">
    <thead>
        <tr class="table-dark">
            <th scope="col"></th>
            <th scope="col">Name</th>
            <th scope="col">Alter</th>
            <th scope="col">Matrikelnummer</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var student in Students)
        {
            <StudentRow StudentData="student" />
        }
    </tbody>
</table>


@code {

    [Parameter]
    public int Remaining { get; set; }

    [Inject]
    public NavigationManager NavManager { get; set; } = null!;

    public IEnumerable<Student> Students { get; set; } = new List<Student>();

    public Stopwatch MeasurementStopWatch { get; } = new Stopwatch();

    public double SortingMilliseconds { get; set; } = 0;

    public double RenderingMilliseconds { get; set; } = 0;

    /// <summary>
    /// Method invoked when the component is ready to start, having received its
    /// initial parameters from its parent in the render tree.
    /// </summary>
    protected override void OnInitialized()
    {
        MeasurementStopWatch.Start();
        SortingData.SortList();
        MeasurementStopWatch.Stop();
        SortingMilliseconds = MeasurementStopWatch.Elapsed.TotalMilliseconds;
        MeasurementStopWatch.Reset();
        Students = StudentDataSet.Students;
        MeasurementStopWatch.Start();
        base.OnInitialized();
    }

    /// <summary>
    /// Method invoked after each time the component has rendered interactively and the UI has finished
    /// updating (for example, after elements have been added to the browser DOM). Any <see cref="T:Microsoft.AspNetCore.Components.ElementReference" />
    /// fields will be populated by the time this runs.
    /// This method is not invoked during prerendering or server-side rendering, because those processes
    /// are not attached to any live browser DOM and are already complete before the DOM is updated.
    /// </summary>
    /// <param name="firstRender">
    /// Set to <c>true</c> if this is the first time <see cref="M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(System.Boolean)" /> has been invoked
    /// on this component instance; otherwise <c>false</c>.
    /// </param>
    /// <remarks>
    /// The <see cref="M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(System.Boolean)" /> and <see cref="M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(System.Boolean)" /> lifecycle methods
    /// are useful for performing interop, or interacting with values received from <c>@ref</c>.
    /// Use the <paramref name="firstRender" /> parameter to ensure that initialization work is only performed
    /// once.
    /// </remarks>
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            MeasurementStopWatch.Stop();
            RenderingMilliseconds = MeasurementStopWatch.ElapsedMilliseconds;
            MeasurementDataSet.Measurements.Add(new()
                {
                    RenderingMilliseconds = RenderingMilliseconds,
                    SortingMilliseconds = SortingMilliseconds
                });
            Remaining--;
            NavManager.NavigateTo($"/measurementlandingpage/{Remaining}");
        }
    }
}
